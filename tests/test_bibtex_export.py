"""Test BibTeX export functionality for missing publications."""

import tempfile
from pathlib import Path
from unittest.mock import mock_open, patch

import pytest

from puby.cli import _export_missing_publications
from puby.models import Author, Publication


@pytest.fixture
def sample_publications():
    """Create sample publications for testing."""
    return [
        Publication(
            title="Machine Learning in Python",
            authors=[
                Author(name="John Smith", family_name="Smith", given_name="John"),
                Author(name="Jane Doe", family_name="Doe", given_name="Jane"),
            ],
            year=2023,
            journal="Journal of Machine Learning",
            volume="10",
            issue="2",
            pages="123-145",
            doi="10.1000/ml.2023.123",
        ),
        Publication(
            title="Deep Learning Applications",
            authors=[
                Author(name="Alice Johnson", family_name="Johnson", given_name="Alice")
            ],
            year=2022,
            journal="AI Review",
            doi="10.1000/ai.2022.456",
        ),
        Publication(
            title="Data Science Methods",
            authors=[Author(name="Bob Wilson", family_name="Wilson", given_name="Bob")],
            year=2021,
        ),
    ]


class TestBibTeXExport:
    """Test BibTeX export functionality."""

    def test_export_missing_publications_creates_file(self, sample_publications):
        """Test that export creates a BibTeX file."""
        with tempfile.NamedTemporaryFile(suffix=".bib", delete=False) as tmp:
            output_path = tmp.name

        try:
            _export_missing_publications(sample_publications, output_path)

            # Check file was created
            assert Path(output_path).exists()

            # Check file has content
            with open(output_path) as f:
                content = f.read()

            assert len(content) > 0
            assert "@article{" in content

        finally:
            Path(output_path).unlink(missing_ok=True)

    def test_export_missing_publications_content(self, sample_publications):
        """Test that export generates correct BibTeX content."""
        with tempfile.NamedTemporaryFile(suffix=".bib", delete=False) as tmp:
            output_path = tmp.name

        try:
            _export_missing_publications(sample_publications, output_path)

            with open(output_path) as f:
                content = f.read()

            # Check header comment
            assert "BibTeX export of missing publications" in content
            assert "Generated by puby" in content

            # Check each publication is exported
            assert "Smith2023-123" in content
            assert "Johnson2022" in content
            assert "Wilson2021" in content

            # Check BibTeX structure
            assert content.count("@article{") == 3
            assert "Machine Learning in Python" in content
            assert "Deep Learning Applications" in content
            assert "Data Science Methods" in content

        finally:
            Path(output_path).unlink(missing_ok=True)

    def test_export_missing_publications_empty_list(self):
        """Test export with empty publication list."""
        with tempfile.NamedTemporaryFile(suffix=".bib", delete=False) as tmp:
            output_path = tmp.name

        try:
            _export_missing_publications([], output_path)

            with open(output_path) as f:
                content = f.read()

            # Should have header but no entries
            assert "BibTeX export of missing publications" in content
            assert "No missing publications found" in content
            assert "@article{" not in content

        finally:
            Path(output_path).unlink(missing_ok=True)

    def test_export_missing_publications_resolves_key_conflicts(self):
        """Test that citation key conflicts are resolved."""
        # Create publications with potential key conflicts
        conflicting_pubs = [
            Publication(
                title="First Paper",
                authors=[
                    Author(name="Smith, John", family_name="Smith", given_name="John")
                ],
                year=2023,
                pages="100-110",
            ),
            Publication(
                title="Second Paper",
                authors=[
                    Author(name="Smith, John", family_name="Smith", given_name="John")
                ],
                year=2023,
                pages="100-110",  # Same pages, should cause conflict
            ),
        ]

        with tempfile.NamedTemporaryFile(suffix=".bib", delete=False) as tmp:
            output_path = tmp.name

        try:
            _export_missing_publications(conflicting_pubs, output_path)

            with open(output_path) as f:
                content = f.read()

            # Should have both publications with different keys
            assert "Smith2023-100" in content
            assert "Smith2023-100a" in content  # Conflict resolved with 'a' suffix
            assert content.count("@article{") == 2

        finally:
            Path(output_path).unlink(missing_ok=True)

    def test_export_missing_publications_file_permissions_error(
        self, sample_publications
    ):
        """Test export handles file permission errors gracefully."""
        # Try to write to a read-only directory
        with patch("builtins.open", mock_open()) as mock_file:
            mock_file.side_effect = PermissionError("Permission denied")

            with pytest.raises(PermissionError):
                _export_missing_publications(sample_publications, "/readonly/test.bib")

    def test_export_missing_publications_default_filename(self, sample_publications):
        """Test export with default filename."""
        # Test that default filename is used when None provided
        with patch("builtins.open", mock_open()) as mock_file:
            _export_missing_publications(sample_publications, None)

            # Should use default filename
            mock_file.assert_called_once()
            call_args = mock_file.call_args[0]
            assert call_args[0] == "missing_publications.bib"

    def test_bibtex_format_validation(self, sample_publications):
        """Test that generated BibTeX is properly formatted."""
        with tempfile.NamedTemporaryFile(suffix=".bib", delete=False) as tmp:
            output_path = tmp.name

        try:
            _export_missing_publications(sample_publications, output_path)

            with open(output_path) as f:
                content = f.read()

            # Check BibTeX structure compliance
            lines = content.split("\n")
            bibtex_entries = []
            current_entry = []
            in_entry = False

            for line in lines:
                if line.startswith("@article{"):
                    in_entry = True
                    current_entry = [line]
                elif in_entry:
                    current_entry.append(line)
                    if line.strip() == "}":
                        bibtex_entries.append("\n".join(current_entry))
                        current_entry = []
                        in_entry = False

            # Should have 3 complete entries
            assert len(bibtex_entries) == 3

            # Each entry should be properly closed
            for entry in bibtex_entries:
                assert entry.startswith("@article{")
                assert entry.endswith("}")
                assert entry.count("{") == entry.count("}")

        finally:
            Path(output_path).unlink(missing_ok=True)
